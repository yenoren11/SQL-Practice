--C. Ingredient Optimisation
-- STEP 1: DATA CLEANING
--1. Create temporary table 'PIZZA_RECIPES_TEMP'
DROP TABLE IF EXISTS #PIZZA_RECIPES_TEMP
SELECT PIZZA_ID,
	   CAST(VALUE AS INT) AS TOPPING_ID
INTO #PIZZA_RECIPES_TEMP
FROM PIZZA_RECIPES PR
CROSS APPLY STRING_SPLIT(PR.TOPPINGS, ',')
GO

SELECT * FROM #PIZZA_RECIPES_TEMP
GO

--2. Create temporary table 'TOPPING_SPLIT'
DROP TABLE IF EXISTS #TOPPING_SPLIT
SELECT PIZZA_ID, PT.TOPPING_ID, TOPPING_NAME
INTO #TOPPING_SPLIT
FROM #PIZZA_RECIPES_TEMP PR
JOIN PIZZA_TOPPINGS PT ON PR.TOPPING_ID = PT.TOPPING_ID
ORDER BY PIZZA_ID
GO

SELECT * FROM #TOPPING_SPLIT
GO

--3. Add an identity column named RECORD_ID to the CUSTOMER_ORDERS_TEMP table to uniquely identify and select each individual pizza order more easily.
ALTER TABLE #CUSTOMER_ORDERS_TEMP
ADD RECORD_ID INT IDENTITY(1,1) PRIMARY KEY
GO


--4. Create two new temporary tables, EXTRAS_SPLIT and EXCLUSIONS_SPLIT, to break down the toppings into separate rows.
DROP TABLE IF EXISTS #EXTRAS_SPLIT
SELECT RECORD_ID, LTRIM(RTRIM(VALUE)) AS EXTRA_ID
INTO #EXTRAS_SPLIT
FROM #CUSTOMER_ORDERS_TEMP
CROSS APPLY STRING_SPLIT(EXTRAS, ',')
GO

SELECT * FROM #EXTRAS_SPLIT
GO

DROP TABLE IF EXISTS #EXCLUSIONS_SPLIT
SELECT RECORD_ID, LTRIM(RTRIM(VALUE)) AS EXCLUSION_ID
INTO #EXCLUSIONS_SPLIT
FROM #CUSTOMER_ORDERS_TEMP
CROSS APPLY STRING_SPLIT(EXCLUSIONS, ',')
GO

SELECT * FROM #EXCLUSIONS_SPLIT
GO

--STEP 2: ANSWER QUESTIONS
--1. What are the standard ingredients for each pizza?
SELECT PN.PIZZA_ID, PN.PIZZA_NAME,
	   STRING_AGG(PT.TOPPING_NAME, ', ') AS INGREDIENTS
FROM PIZZA_NAMES PN
JOIN #TOPPING_SPLIT TS ON TS.PIZZA_ID = PN.PIZZA_ID
JOIN PIZZA_TOPPINGS PT ON PT.TOPPING_ID = TS.TOPPING_ID
GROUP BY PN.PIZZA_ID, PN.PIZZA_NAME
GO

--2. What was the most commonly added extra?
SELECT TOP 1 EXTRA_ID, TOPPING_NAME, COUNT(EXTRA_ID) AS MOST_EXTRA
FROM #EXTRAS_SPLIT ES
JOIN PIZZA_TOPPINGS PT ON ES.EXTRA_ID = PT.TOPPING_ID
GROUP BY EXTRA_ID, TOPPING_NAME
ORDER BY MOST_EXTRA DESC
GO

--3. What was the most common exclusion?
SELECT TOP 1 EXCLUSION_ID, TOPPING_NAME, COUNT(EXCLUSION_ID) AS MOST_EXCLUSION
FROM #EXCLUSIONS_SPLIT ES
JOIN PIZZA_TOPPINGS PT ON ES.EXCLUSION_ID = PT.TOPPING_ID
GROUP BY EXCLUSION_ID, TOPPING_NAME
ORDER BY MOST_EXCLUSION DESC
GO

--4. Generate an order item for each record in the customers_orders table in the format of one of the following:
--Meat Lovers
--Meat Lovers - Exclude Beef
--Meat Lovers - Extra Bacon
--Meat Lovers - Exclude Cheese, Bacon - Extra Mushroom, Peppers
SELECT CO.RECORD_ID, CO.ORDER_ID, CO.CUSTOMER_ID, 
	   CO.PIZZA_ID, CO.EXCLUSIONS, CO.EXTRAS, 
	   CO.ORDER_DATE, PN.PIZZA_NAME
	   + CASE
			WHEN EXCLUSIONS IS NOT NULL THEN ' - Exclude ' + EXCLUSIONS_LIST
			ELSE ''
	     END
	   + CASE
			WHEN EXTRAS IS NOT NULL THEN ' - Extra ' + EXTRAS_LIST
			ELSE ''
	     END AS ORDER_ITEM
FROM #CUSTOMER_ORDERS_TEMP CO
JOIN PIZZA_NAMES PN ON CO.PIZZA_ID = PN.PIZZA_ID
LEFT JOIN (SELECT ES.RECORD_ID,
				  STRING_AGG(PT.TOPPING_NAME, ', ') AS EXCLUSIONS_LIST
		   FROM #EXCLUSIONS_SPLIT ES
		   JOIN PIZZA_TOPPINGS PT ON PT.TOPPING_ID = ES.EXCLUSION_ID
		   GROUP BY ES.RECORD_ID) E ON CO.RECORD_ID = E.RECORD_ID
LEFT JOIN (SELECT ES.RECORD_ID,
				  STRING_AGG(PT.TOPPING_NAME, ', ') AS EXTRAS_LIST
		   FROM #EXTRAS_SPLIT ES
		   JOIN PIZZA_TOPPINGS PT ON PT.TOPPING_ID = ES.EXTRA_ID
		   GROUP BY ES.RECORD_ID) ET ON CO.RECORD_ID = ET.RECORD_ID
ORDER BY CO.RECORD_ID
GO

--5. Generate an alphabetically ordered comma separated ingredient list for each pizza order from the customer_orders table and add a 2x in front of any relevant ingredients
--For example: "Meat Lovers: 2xBacon, Beef, ... , Salami"
WITH STANDARDTOPPINGS AS (
    SELECT CO.RECORD_ID, t.TOPPING_NAME
    FROM #CUSTOMER_ORDERS_TEMP CO
    JOIN #TOPPING_SPLIT TS 
         ON CO.PIZZA_ID = TS.PIZZA_ID
    JOIN PIZZA_TOPPINGS t 
         ON ts.TOPPING_ID = t.TOPPING_ID
),
EXCLUSIONS AS (
    SELECT E.RECORD_ID, PT.TOPPING_NAME
    FROM #EXCLUSIONS_SPLIT E
    JOIN PIZZA_TOPPINGS PT
         ON E.EXCLUSION_ID = PT.TOPPING_ID
),
EXTRAS AS (
    SELECT E.RECORD_ID, PT.TOPPING_NAME
    FROM #EXTRAS_SPLIT E
    JOIN PIZZA_TOPPINGS PT 
         ON E.EXTRA_ID = PT.TOPPING_ID
),
FINALTOPPINGS AS (
    -- Take the standard topping minus the exclusions
    SELECT S.RECORD_ID, S.TOPPING_NAME
    FROM STANDARDTOPPINGS S
    LEFT JOIN EXCLUSIONS EX
           ON S.RECORD_ID = EX.RECORD_ID 
          AND S.TOPPING_NAME = EX.TOPPING_NAME
    WHERE EX.TOPPING_NAME IS NULL

    UNION ALL

    -- Add extras
    SELECT RECORD_ID, TOPPING_NAME
    FROM EXTRAS
),
TOPPINGCOUNT AS (
    SELECT 
        RECORD_ID,
        TOPPING_NAME,
        COUNT(*) AS CNT
    FROM FINALTOPPINGS
    GROUP BY RECORD_ID, TOPPING_NAME
)
SELECT 
    CO.RECORD_ID, CO.ORDER_ID, CO.CUSTOMER_ID, 
	CO.PIZZA_ID, CO.EXCLUSIONS, CO.EXTRAS, CO.ORDER_DATE,
    PN.PIZZA_NAME + ': ' +
    STRING_AGG(
        CASE WHEN TC.CNT = 2 
             THEN '2x' + TC.TOPPING_NAME 
             ELSE TC.TOPPING_NAME END,
        ', '
    ) WITHIN GROUP (ORDER BY TC.TOPPING_NAME) AS INGREDIENT_LIST
FROM TOPPINGCOUNT TC
JOIN #CUSTOMER_ORDERS_TEMP CO
     ON TC.RECORD_ID = CO.RECORD_ID
JOIN PIZZA_NAMES PN
     ON CO.PIZZA_ID = PN.PIZZA_ID
GROUP BY CO.RECORD_ID, CO.ORDER_ID, CO.CUSTOMER_ID, CO.PIZZA_ID, CO.EXCLUSIONS, CO.EXTRAS, CO.ORDER_DATE, PN.PIZZA_NAME
ORDER BY CO.RECORD_ID
GO

--6. What is the total quantity of each ingredient used in all delivered pizzas sorted by most frequent first?
WITH FREQUENCY AS (
	SELECT CO.RECORD_ID, PT.TOPPING_NAME,
		   CASE
				WHEN PT.TOPPING_ID IN (SELECT EXTRA_ID FROM #EXTRAS_SPLIT E WHERE E.RECORD_ID = CO.RECORD_ID) THEN 2
				WHEN PT.TOPPING_ID IN (SELECT EXCLUSION_ID FROM #EXCLUSIONS_SPLIT EX WHERE EX.RECORD_ID = CO.RECORD_ID) THEN 0
				ELSE 1
		   END AS TIMES
	FROM #CUSTOMER_ORDERS_TEMP CO
	JOIN #TOPPING_SPLIT TS ON CO.PIZZA_ID = TS.PIZZA_ID
	JOIN PIZZA_TOPPINGS PT ON PT.TOPPING_ID = TS.TOPPING_ID)
SELECT TOPPING_NAME, SUM(TIMES) AS TOTAL_TIMES
FROM FREQUENCY
GROUP BY TOPPING_NAME
ORDER BY TOTAL_TIMES DESC
GO