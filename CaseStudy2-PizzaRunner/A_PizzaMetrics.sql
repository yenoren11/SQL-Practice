--A. Pizza Metrics
--STEP 1: DATA CLEANING
--1. Create temporary table 'CUSTOMER_ORDERS_TEMP'
DROP TABLE IF EXISTS #CUSTOMER_ORDERS_TEMP
SELECT ORDER_ID, CUSTOMER_ID, PIZZA_ID,
	 (CASE
			WHEN EXCLUSIONS IN ('null', 'NaN', '') THEN NULL
			ELSE EXCLUSIONS 
	  END) AS EXCLUSIONS,
	 (CASE
			WHEN EXTRAS IN ('null', 'NaN', '') THEN NULL
			ELSE EXTRAS
	  END) AS EXTRAS, ORDER_DATE
INTO #CUSTOMER_ORDERS_TEMP
FROM CUSTOMER_ORDERS
GO

SELECT * FROM #CUSTOMER_ORDERS_TEMP
GO

--2. Create temporary table 'RUNNER_ORDERS_TEMP'
DROP TABLE IF EXISTS #RUNNER_ORDERS_TEMP
SELECT ORDER_ID, RUNNER_ID,
	 (CASE
			WHEN PICKUP_TIME = 'null' THEN NULL
			ELSE PICKUP_TIME 
	  END) AS PICKUP_TIME,
	 TRY_CAST(CASE
			WHEN DISTANCE = 'null' THEN NULL
			WHEN DISTANCE LIKE '%km' THEN REPLACE(LTRIM(RTRIM(DISTANCE)), 'km', '')
			ELSE DISTANCE
	  END AS FLOAT) AS DISTANCE,
	  TRY_CAST(CASE
			WHEN DURATION = 'null' THEN NULL
			WHEN DURATION LIKE '%minutes' THEN REPLACE(LTRIM(RTRIM(DURATION)), 'minutes', '')
			WHEN DURATION LIKE '%minute' THEN REPLACE(LTRIM(RTRIM(DURATION)), 'minute', '')
			WHEN DURATION LIKE '%mins' THEN REPLACE(LTRIM(RTRIM(DURATION)), 'mins', '')
			ELSE DURATION
	  END AS FLOAT) AS DURATION,
	  (CASE
			WHEN CANCELLATION IN ('null', 'NaN', '') THEN NULL
			ELSE CANCELLATION
	  END) AS CANCELLATION
INTO #RUNNER_ORDERS_TEMP
FROM RUNNER_ORDERS
GO

SELECT * FROM #RUNNER_ORDERS_TEMP
GO

--STEP 2: ANSWER QUESTIONS
--1. How many pizzas were ordered?
SELECT COUNT(*) AS COUNT_PIZZAS_ORDERED
FROM #CUSTOMER_ORDERS_TEMP
GO

--2. How many unique customer orders were made?
SELECT COUNT(DISTINCT ORDER_ID) AS TOTAL_ORDERS
FROM CUSTOMER_ORDERS
GO

--3. How many successful orders were delivered by each runner?
SELECT RUNNER_ID, COUNT(ORDER_ID) AS TOTAL_SUCCESSFUL_ORDERS
FROM #RUNNER_ORDERS_TEMP
WHERE CANCELLATION IS NULL
GROUP BY RUNNER_ID
GO

--4. How many of each type of pizza was delivered?
SELECT CO.PIZZA_ID, PIZZA_NAME ,COUNT(CO.ORDER_ID) AS TOTAL_PIZZA_DELIVERED
FROM #CUSTOMER_ORDERS_TEMP CO
JOIN #RUNNER_ORDERS_TEMP RO ON CO.ORDER_ID = RO.ORDER_ID
JOIN PIZZA_NAMES PN ON PN.PIZZA_ID = CO.PIZZA_ID
WHERE CANCELLATION IS NULL
GROUP BY CO.PIZZA_ID, PIZZA_NAME
GO

--5. How many Vegetarian and Meatlovers were ordered by each customer?
SELECT CUSTOMER_ID,
	   SUM(CASE
				WHEN PIZZA_ID = 1 THEN 1
				ELSE 0
		   END) AS Meatlovers,
	   SUM(CASE
				WHEN PIZZA_ID = 2 THEN 1
				ELSE 0
		   END) AS Vegetarian
FROM #CUSTOMER_ORDERS_TEMP
GROUP BY CUSTOMER_ID
GO

--6. What was the maximum number of pizzas delivered in a single order?
SELECT TOP 1 CO.ORDER_ID, COUNT(CO.PIZZA_ID) AS TOTAL_PIZZAS
FROM #CUSTOMER_ORDERS_TEMP CO
JOIN #RUNNER_ORDERS_TEMP RO ON CO.ORDER_ID = RO.ORDER_ID
WHERE CANCELLATION IS NULL
GROUP BY CO.ORDER_ID
ORDER BY TOTAL_PIZZAS DESC
GO

--7. For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
SELECT CO.CUSTOMER_ID,
	   SUM(CASE
				WHEN EXCLUSIONS IS NULL AND EXTRAS IS NULL THEN 1
				ELSE 0
			 END) AS TOTAL_PIZZA_NO_CHANGES,
	   SUM(CASE
				WHEN EXCLUSIONS IS NOT NULL OR EXTRAS IS NOT NULL THEN 1
				ELSE 0
			 END) AS TOTAL_PIZZA_CHANGES
FROM #CUSTOMER_ORDERS_TEMP CO
JOIN #RUNNER_ORDERS_TEMP RO ON CO.ORDER_ID = RO.ORDER_ID
WHERE CANCELLATION IS NULL
GROUP BY CO.CUSTOMER_ID
GO

--8. How many pizzas were delivered that had both exclusions and extras?
SELECT SUM(CASE
				WHEN EXCLUSIONS IS NOT NULL AND EXTRAS IS NOT NULL THEN 1
				ELSE 0
		   END) AS TOTAL_CHANGE_BOTH
FROM #CUSTOMER_ORDERS_TEMP CO
JOIN #RUNNER_ORDERS_TEMP RO ON CO.ORDER_ID = RO.ORDER_ID
WHERE CANCELLATION IS NULL
GO

--9. What was the total volume of pizzas ordered for each hour of the day?
SELECT DATEPART(HOUR, ORDER_DATE) AS HOUR_OF_DAY,
	   COUNT(PIZZA_ID) AS PIZZA_VOLUME
FROM #CUSTOMER_ORDERS_TEMP
GROUP BY DATEPART(HOUR, ORDER_DATE)
ORDER BY HOUR_OF_DAY
GO

--10. What was the volume of orders for each day of the week?
SELECT DATENAME(WEEKDAY, ORDER_DATE) AS DAY_OF_WEEK,
	   COUNT(DISTINCT ORDER_ID) AS ORDER_VOLUME
FROM #CUSTOMER_ORDERS_TEMP
GROUP BY DATENAME(WEEKDAY, ORDER_DATE)
ORDER BY DAY_OF_WEEK
GO